"""
Shell completion support for Amplifier CLI v3.

This module provides shell completion functionality for bash, zsh, and fish shells.
It uses Click's built-in completion system with custom completers for dynamic values.

Contract:
    - Support bash, zsh, and fish shells
    - Complete command names, resource types, and installed resources
    - Provide installation instructions for each shell
"""

import click
from click.shell_completion import CompletionItem

from amplifier.cli.core.manifest import load_manifest

# Resource types supported by the CLI
RESOURCE_TYPES = ["agents", "tools", "commands", "mcp-servers"]

# Config keys available in the CLI
CONFIG_KEYS = ["default_source", "auto_update_check", "github_repo"]


def resource_type_completion(ctx: click.Context, param: click.Parameter, incomplete: str) -> list[CompletionItem]:
    """Complete resource type names.

    Args:
        ctx: Click context
        param: Click parameter
        incomplete: Partial input to complete

    Returns:
        List of completion items for resource types
    """
    return [CompletionItem(rt) for rt in RESOURCE_TYPES if rt.startswith(incomplete.lower())]


def installed_resource_completion(ctx: click.Context, param: click.Parameter, incomplete: str) -> list[CompletionItem]:
    """Complete installed resource names.

    This is used for commands like remove and update that operate on
    already installed resources.

    Args:
        ctx: Click context
        param: Click parameter
        incomplete: Partial input to complete

    Returns:
        List of completion items for installed resources
    """
    completions = []

    try:
        # Load manifest to get installed resources
        manifest = load_manifest()

        # Check if we have a resource type already
        # The previous parameter should be the resource type
        resource_type = None
        if ctx.params:
            # Try to get resource_type from context params
            resource_type = ctx.params.get("resource_type")

        if resource_type and resource_type in RESOURCE_TYPES:
            # Complete resource names for the specific type
            resources = manifest.resources.get(resource_type, [])
            for resource in resources:
                if resource.name.startswith(incomplete):
                    completions.append(
                        CompletionItem(resource.name, help=f"Installed {resource.type[:-1]}: {resource.name}")
                    )
        else:
            # If no resource type, complete resource types first
            completions.extend(resource_type_completion(ctx, param, incomplete))
    except Exception:
        # If we can't load the manifest, just return empty list
        pass

    return completions


def config_key_completion(ctx: click.Context, param: click.Parameter, incomplete: str) -> list[CompletionItem]:
    """Complete configuration key names.

    Args:
        ctx: Click context
        param: Click parameter
        incomplete: Partial input to complete

    Returns:
        List of completion items for config keys
    """
    return [
        CompletionItem(key, help=get_config_key_help(key)) for key in CONFIG_KEYS if key.startswith(incomplete.lower())
    ]


def get_config_key_help(key: str) -> str:
    """Get help text for a config key.

    Args:
        key: Configuration key

    Returns:
        Help text for the key
    """
    help_texts = {
        "default_source": "Default source for installations (github/local)",
        "auto_update_check": "Whether to check for updates automatically",
        "github_repo": "GitHub repository for resources",
    }
    return help_texts.get(key, "")


def get_shell_completion_script(shell: str, prog_name: str = "amplifier") -> str:
    """Generate shell completion script for the specified shell.

    Args:
        shell: Shell type (bash, zsh, fish)
        prog_name: Program name for completion

    Returns:
        Shell-specific completion script
    """
    if shell == "bash":
        return get_bash_completion_script(prog_name)
    if shell == "zsh":
        return get_zsh_completion_script(prog_name)
    if shell == "fish":
        return get_fish_completion_script(prog_name)
    raise ValueError(f"Unsupported shell: {shell}")


def get_bash_completion_script(prog_name: str) -> str:
    """Generate bash completion script.

    Args:
        prog_name: Program name for completion

    Returns:
        Bash completion script
    """
    return f"""# Bash completion for {prog_name}
# Generated by Amplifier CLI v3

_{prog_name}_completion() {{
    local cur prev words cword
    _init_completion || return

    # Use Click's completion system
    local response
    response=$(env COMP_WORDS="${{COMP_WORDS[*]}}" COMP_CWORD=$COMP_CWORD _{prog_name.upper()}_COMPLETE=bash_complete {prog_name})

    COMPREPLY=( $(compgen -W "$response" -- "$cur") )
}}

complete -F _{prog_name}_completion {prog_name}

# To install this completion:
# 1. Save this script to a file (e.g., ~/{prog_name}_completion.bash)
# 2. Add this line to your ~/.bashrc or ~/.bash_profile:
#    source ~/{prog_name}_completion.bash
# 3. Restart your shell or run: source ~/.bashrc
"""


def get_zsh_completion_script(prog_name: str) -> str:
    """Generate zsh completion script.

    Args:
        prog_name: Program name for completion

    Returns:
        Zsh completion script
    """
    return f"""#compdef {prog_name}
# Zsh completion for {prog_name}
# Generated by Amplifier CLI v3

_{prog_name}() {{
    local -a completions
    local -a response
    response=($(env COMP_WORDS="${{words[*]}}" COMP_CWORD=$((CURRENT-1)) _{prog_name.upper()}_COMPLETE=zsh_complete {prog_name}))

    for resp in $response; do
        completions+=($resp)
    done

    _describe -t commands '{prog_name} commands' completions
}}

compdef _{prog_name} {prog_name}

# To install this completion:
# 1. Save this script to a file in your fpath (check with: echo $fpath)
#    For example: ~/.zsh/completions/_{prog_name}
# 2. Make sure this line is in your ~/.zshrc:
#    autoload -U compinit && compinit
# 3. Restart your shell or run: exec zsh
"""


def get_fish_completion_script(prog_name: str) -> str:
    """Generate fish completion script.

    Args:
        prog_name: Program name for completion

    Returns:
        Fish completion script
    """
    return f"""# Fish completion for {prog_name}
# Generated by Amplifier CLI v3

function __{prog_name}_complete
    set -l tokens (commandline -opc)
    set -l current (commandline -ct)
    set -l response (env _FISH_COMPLETE=1 COMP_WORDS=(string join " " $tokens) COMP_CWORD=(count $tokens) _{prog_name.upper()}_COMPLETE=fish_complete {prog_name})

    for completion in $response
        echo $completion
    end
end

complete -c {prog_name} -f -a '(__{prog_name}_complete)'

# To install this completion:
# 1. Save this script to: ~/.config/fish/completions/{prog_name}.fish
# 2. The completion will be available immediately in new shells
# 3. To reload in current shell: source ~/.config/fish/completions/{prog_name}.fish
"""


def install_completion_instructions(shell: str) -> str:
    """Get installation instructions for shell completions.

    Args:
        shell: Shell type (bash, zsh, fish)

    Returns:
        Installation instructions for the shell
    """
    if shell == "bash":
        return """
To enable bash completions:

1. Generate the completion script:
   amplifier completions bash > ~/.amplifier_completion.bash

2. Add this line to your ~/.bashrc or ~/.bash_profile:
   source ~/.amplifier_completion.bash

3. Restart your shell or run:
   source ~/.bashrc
"""
    if shell == "zsh":
        return """
To enable zsh completions:

1. Make sure completions are enabled in your ~/.zshrc:
   autoload -U compinit && compinit

2. Generate the completion script:
   amplifier completions zsh > ~/.zsh/completions/_amplifier

   (Create the directory if it doesn't exist: mkdir -p ~/.zsh/completions)

3. Add the completions directory to your fpath in ~/.zshrc:
   fpath=(~/.zsh/completions $fpath)

4. Restart your shell or run:
   exec zsh
"""
    if shell == "fish":
        return """
To enable fish completions:

1. Generate the completion script:
   amplifier completions fish > ~/.config/fish/completions/amplifier.fish

2. The completion will be available immediately in new shells.

3. To reload in current shell:
   source ~/.config/fish/completions/amplifier.fish
"""
    return f"No installation instructions available for {shell}"
